#!/bin/bash
# HLAtyping 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {
    ### check optitype environment
    export LD_LIBRARY_PATH=/usr/hdf5-1.8.16/lib:$LD_LIBRARY_PATH
    export HDF5_DIR=/usr/hdf5-1.8.16
    echo $LD_LIBRARY_PATH
    echo $HDF5_DIR

    sudo apt-get update
    sudo apt-get -y install liblzma-dev libfreetype6-dev coinor-cbc

    pip install numpy==1.9.3
    pip install pyomo==4.2.10784
    pip install pysam==0.8.3
    pip install matplotlib==1.4.3
    pip install tables==3.2.2
    pip install pandas==0.16.2
    pip install future==0.15.2

    optitype="/usr/OptiType/OptiTypePipeline.py"

    #echo "Test optitype ..."
    #python $optitype --input /usr/OptiType/test/rna/CRC_81_N_1_fished.fastq /usr/OptiType/test/rna/CRC_81_N_2_fished.fastq --rna --outdir /usr/OptiType/test/rna/ --verbose




    echo "fastq1: '$fastq1'"
    echo "fastq2: '$fastq2'"
    echo "BAM: '$BAM'"
    echo "BAM index: '$BAM_idx'"

    dx-download-all-inputs

    fastq1n=""
    fastq2n=""
    bamn=""
    bamidx=""
    [ -d $HOME/in/fastq1 ] && fastq1n=$( ls $HOME/in/fastq1/* )
    [ -d $HOME/in/fastq2 ] && fastq2n=$( ls $HOME/in/fastq2/* )
    [ -d $HOME/in/BAM ] && bamn=$( ls $HOME/in/BAM/* )
    [ -d $HOME/in/BAM_idx ] && bamidx=$( ls $HOME/in/BAM_idx/* )

    echo "[fastq1n] $fastq1n"
    echo "[fastq2n] $fastq2n"
    echo "[bamn] $bamn"
    echo "[bamidx] $bamidx"

    ### install tools
    #sudo apt-get -y update
    #sudo apt-get -y install proot

    ### workaround if docker not working
    #dpkg-divert --local --rename --add /sbin/initctl
    #ln -s /bin/true /sbin/initctl

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
    # Make a data directory to mount into the Docker container
    if [ "${fastq1n}" = "" ] && [ "${bamn}" = "" ]; then
	echo -e "[Error] please give either fastq(s) or a BAM file"
	exit 1
    fi    

    runMode='unset'
    if [ ! -z "${fastq1}" -a "${fastq1}" != " " ]; then
	runMode="fastq"
    elif [ ! -z "${BAM}" -a "{BAM}" != " " ]; then
	runMode="BAM"
    fi
    
    if [ "$runMode" = 'unset' ]; then
	echo -e "[Error] run mode unknown"
    	exit 1
    else
    	echo -e "[runMode] ${runMode}"
    fi
    
    fq1=''
    fq2=''
    if [ "$runMode" = "fastq" ]; then
	fq1=$fastq1n
    	fq2=$fastq2n
    else
	echo -e "[Extract] extracting reads from BAM"
	mount_f="$HOME/samtools/"
        mkdir -p $mount_f
        if [ -z "$bamidx" ]; then
		echo -e "[Build BAM index]"
		#dx-docker run -v $mount_f:/data quay.io/ucsc_cgl/samtools index $bamn
		samtools index $bamn
	else
                threads_num=4
		ln -s $bamidx $HOME/in/BAM/.
                sn=$( basename $bamn )
                sn=${sn%%.*}
		### check chromosome notion in BAM
		echo -e "[Detect chr number]"
		#dx-docker run -v $mount_f/:/data quay.io/ucsc_cgl/samtools view -H $bamn | grep '@SQ' | cut -f 2 > chr.txt
		samtools view -H $bamn | grep '@SQ' | cut -f 2 > chr.txt
		chrn=0
                while read line; do
			if [[ $line == *"chr"* ]] || [[ $line == *"Chr"* ]] ; then
				chrn=$(( chrn + 1 ))
			fi
		done < chr.txt
		

		#cat chrn.txt
                #chrn=$( head chrn.txt -n 1 )
		#chrn=0
                echo -e "[chr number] $chrn"
		rng1='6:29600000-31700000'
		rng2='5:103300000-1033380000'

		if [ $chrn -ge 1 ]; then
			rng1="chr$rng1"
			rng2="chr$rng2"
		fi
		echo -e "[Range 1] $rng1"
		echo -e "[Range 2] $rng2"
	
		### section for read extraction
		samtools view -b -o $HOME/in/BAM/${sn}.4.bam $bamn $rng1
		samtools view -b -o $HOME/in/BAM/${sn}.5.bam $bamn $rng2
		samtools view -u -f 4 -F 264 ${bamn}  > $HOME/in/BAM/${sn}.1.bam;
		samtools view -u -f 8 -F 260 ${bamn}  > $HOME/in/BAM/${sn}.2.bam;
		samtools view -u -f 12 -F 256 ${bamn} > $HOME/in/BAM/${sn}.3.bam;		

		#rm $bamn

		#samtools merge -@ $threads_num -u $HOME/in/BAM/${sn}.m.bam $HOME/in/BAM/${sn}.4.bam $HOME/in/BAM/${sn}.5.bam
		samtools merge -@ $threads_num -u $HOME/in/BAM/${sn}.m.bam $HOME/in/BAM/${sn}.4.bam $HOME/in/BAM/${sn}.5.bam $HOME/in/BAM/${sn}.1.bam $HOME/in/BAM/${sn}.2.bam $HOME/in/BAM/${sn}.3.bam;		

		rm $HOME/in/BAM/${sn}.4.bam
                rm $HOME/in/BAM/${sn}.5.bam
		rm $HOME/in/BAM/${sn}.1.bam
		rm $HOME/in/BAM/${sn}.2.bam
		rm $HOME/in/BAM/${sn}.3.bam

		samtools sort -@ $threads_num -o $HOME/in/BAM/${sn}.merge.psort.bam -T temp $HOME/in/BAM/${sn}.m.bam

		rm $HOME/in/BAM/${sn}.m.bam
		#dx-docker run -v $mount_f/:/data quay.io/ucsc_cgl/samtools rmdup $HOME/in/BAM/${sn}.merge.qsort.bam $HOME/in/BAM/${sn}.merge.qsort.rmdup.bam;
	
		#params='ASSUME_SORTED=true VALIDATION_STRINGENCY=LENIENT'	
		
		#dx-docker run -v $mount_f/:/data quay.io/ucsc_cgl/samtools view -H $HOME/in/BAM/${sn}.merge.psort.bam
		params='VALIDATION_STRINGENCY=LENIENT'
		java -Xmx4g -jar /opt/jar/picard.jar MarkDuplicates INPUT=$HOME/in/BAM/${sn}.merge.psort.bam OUTPUT=$HOME/in/BAM/${sn}.merge.psort.rmdup.bam METRICS_FILE=$HOME/in/BAM/${sn}.merge.psort.rmdup.metric $params 

		rm $HOME/in/BAM/${sn}.merge.psort.bam


		samtools sort -@ $threads_num -n  -o $HOME/in/BAM/${sn}.merge.qsort.rmdup.bam -T nsort $HOME/in/BAM/${sn}.merge.psort.rmdup.bam

		rm $HOME/in/BAM/${sn}.merge.psort.rmdup.bam
                #rm ${sn}.1.unmapped.bam;
        	#rm ${sn}.2.unmapped.bam;
        	#rm ${sn}.3.unmapped.bam;
		#ls $HOME/in/BAM/
		

                mount_f="$HOME/bamutils/"
		mkdir -p $mount_f
		mkdir -p $HOME/fq
                

		#dx-docker run -v $mount_f/:/data quay.io/ucsc_cgl/samtools fastq -1 $HOME/fq/${sn}.merge.qsort_fq.1.fq -2 $HOME/fq/${sn}.merge.qsort_fq.2.fq $HOME/in/BAM/${sn}.merge.qsort.rmdup.bam;



		bam bam2FastQ --in $HOME/in/BAM/${sn}.merge.qsort.rmdup.bam --readName --outBase fq/${sn}.merge.qsort_fq --params 2> /dev/null;



		#rm $HOME/in/BAM/*.bam
		ls -l $HOME/fq
		
		fq1=$HOME/fq/${sn}.merge.qsort_fq_1.fastq
                fq2=$HOME/fq/${sn}.merge.qsort_fq_2.fastq
		fq=$HOME/fq/${sn}.merge.qsort_fq.fastq		
                
	fi
    fi

    echo -e "[fastq1] $fq1"
    echo -e "[fastq2] $fq2"

    all_fq="$fq1 $fq2"
    echo -e "[all fastqs] $all_fq"

    sn=$( basename $fq1 )
    sn=${sn%%_*}
    sn=${sn%%.*}

    # Fill in your application code here.
    ### pull HLAtyping docker image
    # Make a data directory to mount into the Docker container
    echo -e "[optitype] start ... `date`"
    mount_f="$HOME/optitype/"
    mkdir -p $mount_f

    # Mount the /data/ directory to /data in the container and run
    #dx-docker pull fred2/optitype:release-v1.2.1
    #dx-docker run -v ${mount_f}:/data/ fred2/optitype --input $all_fq --dna --outdir $mount_f 

    #ls -l $optitype

    #python $optitype --help
    python $optitype --input $all_fq --beta 0.009 --dna --outdir $mount_f --verbose

    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    echo -e "[upload results]"
    outfolder="out/hlatype/hlatyping"
    outfolder2="out/hlatype/optitype"
    mkdir -p $outfolder
    mkdir -p $outfolder2
    hla=$( ls $mount_f/*/*.tsv )
    head $hla
    echo -e "...sn: $sn" 
    linenum=0
    htype=$sn
    while read line; do
	linenum=$(( $linenum + 1))
	### skip header
	if [ $linenum -ge 2 ]; then
		ary=($line)
		for key in "${!ary[@]}"; do 
			value=`echo ${ary[$key]} | sed 's/\*//g'`
			if [[ $value == *":"* ]]; then
				htype=`echo -e "$htype\tHLA-$value"`
				#echo "$htype"
			fi	 
		done
	fi
    done < $hla

    cp $mount_f/*/*.tsv $outfolder2/.
    echo "$htype" > $outfolder/$sn.hlatype

    echo -e "[optitype] $outfolder2"
    echo -e "[hlatype] $outfolder"

    ### upload a single file

    hlatype=$(dx upload "$outfolder/$sn.hlatype" --brief --no-progress)
    optitype=$(dx upload $outfolder2 --recursive --brief --no-progress )
    echo -e "...upload hlatype info file for workflow"
    dx-jobutil-add-output hlatype "$hlatype" --class=file
    echo -e "...upload all outputs"
    dx-jobutil-add-output optitype "$optitype" --class=array:file

    ### upload multiplf files
    #output=$(dx upload $outfolder --recursive --brief)
    #dx-upload-all-outputs

}
